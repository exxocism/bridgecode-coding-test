4. DB 동시성 제어 (문제해결)

당사에서는 locking 기법을 통해 데이터베이스 동시성 제어를 하고 있습니다.
아래와 같은 테이블 상황에서 어떤 사용자가 거래를 산발적으로 일으키고, 그 거래의 결과는 포인트에 입출이 된다고 가정합니다.
거래 간의 동시성 제어를 어떻게 하고, 포인트 오류의 회피전략에 대해 고민해보고 생각을 적어주세요.
또, Node.js 에서 어떻게 하면 동시성 제어를 할 수 있을지 기술적인 전략을 기술해주세요.

※ 테이블 명세는 MySQL 기반입니다.


CREATE TABLE member_point
( member_idx INT NOT NULL COMMENT '사용자idx'
, point BIGINT NOT NULL DEFAULT 0 COMMENT '포인트'
, PRIMARY KEY(member_idx)
) COMMENT = '사용자 포인트';


CREATE TABLE member_deal
( idx INT AUTO_INCREMENT COMMENT '일련번호'
, member_idx INT NOT NULL COMMENT '사용자idx'
, deal_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT '거래일자'
, point BIGINT NOT NULL DEFAULT 0 COMMENT '포인트'
, io_tp INT NOT NULL COMMENT '입출력 구분 (1:입력, 2:출력)'
, PRIMARY KEY(idx)
, KEY (member_idx, deal_date)
) COMMENT = '사용자 거래';

답변)

1. 동일한 시간 또는 매우 짧은 시간에 한 사용자가 여러 거래를 발생시킬 경우,
  하나의 거래결과가 member_point 테이블에 기록되기 전에
  다른 거래가 member_point 테이블을 읽어들여 거래가 가능한 것으로 판단할 수 있습니다.

2. 이 경우, 포인트가 부족함에도 불구하고 거래가 발생하여 포인트가 음수로 바뀔 수 있습니다.

3. 이를 방지하기 위해 트랜잭션을 이용하며, 격리 수준을 serializable로 설정합니다.

4. Node.js에서는 ORM의 트랜잭션 메소드를 이용하여 처리하면 편리하게 구현할 수 있을것 같습니다.
(https://sequelize.org/master/manual/transactions.html)



